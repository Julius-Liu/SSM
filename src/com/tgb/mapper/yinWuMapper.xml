<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	namespac: 必须与对应的接口全类名一致
	id: 必须与对应接口的某个对应的方法名一致	
 -->
 
<mapper namespace="com.tgb.mapper.YinWuMapper">
	
	<insert id="save" parameterType="YinWu" useGeneratedKeys="true" keyProperty="id">
		insert into yin_wu(start_date, 
			end_date, 
			publish_company, 
			print_company, 
			book_name, 
			book_specs, 
			yin_zhang, 
			revision,
			print_quantity,
			ISBN,
			ze_ren_editor,
			ze_ren_department,
			print_status,
			print_quality) 
		values(#{start_date},
			#{end_date},
			#{publish_company},
			#{print_company},
			#{book_name},
			#{book_specs},
			#{yin_zhang},
			#{revision},
			#{print_quantity},
			#{ISBN},
			#{ze_ren_editor},
			#{ze_ren_department},
			#{print_status},
			#{print_quality})
	</insert>
	
	<update id="update" parameterType="YinWu">
		update yin_wu set start_date=#{start_date}, 
			end_date=#{end_date}, 
			publish_company=#{publish_company}, 
			print_company=#{print_company}, 
			book_name=#{book_name}, 
			book_specs=#{book_specs}, 
			yin_zhang=#{yin_zhang}, 
			revision=#{revision},
			print_quantity=#{print_quantity},
			ISBN=#{ISBN},
			ze_ren_editor=#{ze_ren_editor},
			ze_ren_department=#{ze_ren_department},
			print_status=#{print_status},
			print_quality=#{print_quality}
		where id=#{id}
	</update>
	
	<delete id="delete" parameterType="int">
		delete from yin_wu where id=#{id}
	</delete>
	
	<select id="findById" parameterType="int" resultType="YinWu">
		select * from yin_wu where id=#{id}
	</select>
	
	<select id="findAll" resultType="YinWu">
		select yin_wu.id, 
			start_date, 
			end_date, 
			publish_company, 
			print_company, 
			book_name, 
			book_specs.content as book_specs_content, 
			yin_zhang,
			revision,
			print_quantity,
			ISBN,
			ze_ren_editor,
			ze_ren_department,
			print_status.content as print_status_content,
			print_quality.content as print_quality_content
		from ((yin_wu inner join book_specs on yin_wu.book_specs=book_specs.id)				
					inner join print_status on yin_wu.print_status=print_status.id)
						inner join print_quality on yin_wu.print_quality=print_quality.id				
		order by yin_wu.id asc
	</select>
	
	<select id="calculateTotalPageAndRecordNumber" parameterType="com.tgb.model.YinWu" resultType="YinWu">
		select yin_wu.id, 
			start_date, 
			end_date, 
			publish_company, 
			print_company, 
			book_name, 
			book_specs.content as book_specs_content, 
			yin_zhang,
			revision,
			print_quantity,
			ISBN,
			ze_ren_editor,
			ze_ren_department,
			print_status.content as print_status_content,
			print_quality.content as print_quality_content
		from ((yin_wu inner join book_specs on yin_wu.book_specs=book_specs.id)
					inner join print_status on yin_wu.print_status=print_status.id)
						inner join print_quality on yin_wu.print_quality=print_quality.id	
		<where>
			<if test="print_company != null and print_company != '' ">
				print_company like CONCAT(CONCAT('%', #{print_company, jdbcType=VARCHAR}), '%')
			</if>
			<if test="book_name != null and book_name != '' ">
				AND book_name like CONCAT(CONCAT('%', #{book_name, jdbcType=VARCHAR}), '%')
			</if>			
			<if test="ze_ren_editor != null and ze_ren_editor != '' ">				
				AND ze_ren_editor like CONCAT(CONCAT('%', #{ze_ren_editor, jdbcType=VARCHAR}), '%')
			</if>
			<if test="print_status != 0">
				AND print_status = #{print_status, jdbcType=INTEGER}
			</if>

		</where>
		order by yin_wu.id asc
	</select>
	
</mapper>